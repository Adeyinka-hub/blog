{
  
    
        "post0": {
            "title": "Selective network routing/Split Tunneling via VPN",
            "content": "Everyone is working from home and for me it is remotely working on the servers in my college. I can only connect to them via a VPN, but that slows down my browsing and video conferencing. . I was trying to figure out a way to use VPN specifically for the server in college and let the other traffic move normally. That’s when I came across this solution. In this blog I’ll explain the solution step by step. . tl,dr : At the end of this blog you’ll be able to select which website or IP addresses you want to route through the VPN. . Requirements: . Ubuntu (Should work on other Linux distros as well) If you are using windows, this method works with Windows Subsystem for Linux. Do ensure that you have WSL2 before proceeding. | . | Openfortivpn Ensure that you can connect to a VPN using it. | . | . Steps for selective routing . 1. VPN configuration file . This file tells our VPN client the configuration of our VPN. . Save the below config file as vpn-config.conf anywhere on your computer . host = vpn.iiitd.edu.in port = 10443 username = &lt;your username&gt; password = &lt;your pass&gt; set-routes = 0 set-dns = 0 pppd-use-peerdns = 0 . set-routes = 0 specifies to not make any routes through the VPN, now we will whitelist the websites to use through the VPN. . 2. Setup the PPP script . What’s PPP?: PPP is Point to Point protocol. Linux uses this protocol to communicate over TCP/IP to your Internet Provider.read more . We are now going to write a script that will whitelist specific domains to pass through the VPN. . Use the following commands to create the script . sudo touch /etc/ppp/ip-up.d/fortivpn sudo chmod a+x /etc/ppp/ip-up.d/fortivpn . What’s pppd? The PPP Daemon (pppd) is a freely available implementation of the Point-to-Point Protocol (PPP) that runs on many Unix systems. read more . What’s ip-up? /etc/ppp/ip-up is a shell script executed by pppd when the link/internet comes up. read more . Edit the above script with your favourite editor, it shall look like: . #!/bin/bash # # Whitelist here all domains that need to go through openfortivpn # Domains and IPs are separated by a space # ips=&#39;192.168.2.217 192.168.29.151&#39; domains=&#39;example.com example.fr&#39; let resolved for domain in $domains; do resolved=`dig +short $domain | tail -n1` ips=&quot;$ips $resolved&quot; done for ip in $ips; do route add $ip dev ppp0 done . Now add the ips and domains you want to access through the VPN. . 3. Run the VPN . The following command should connect you to your VPN now. . sudo openfortivpn -c vpn-config.conf . Below you can see the routes added for the ip addresses. ppp0 is the vpn interface and enp2s0 is the ethernet. . rohan@rohan-laptop ~&gt; route (base) Kernel IP routing table Destination Gateway Genmask Flags Metric Ref Use Iface default _gateway 0.0.0.0 UG 100 0 0 enp2s0 one.one.one.one 0.0.0.0 255.255.255.255 UH 0 0 0 ppp0 103.25.231.4 0.0.0.0 255.255.255.255 UH 0 0 0 ppp0 link-local 0.0.0.0 255.255.0.0 U 1000 0 0 enp2s0 192.168.0.0 0.0.0.0 255.255.255.0 U 100 0 0 enp2s0 192.168.2.217 0.0.0.0 255.255.255.255 UH 0 0 0 ppp0 192.168.29.151 0.0.0.0 255.255.255.255 UH 0 0 0 ppp0 . That’s about it! You can now work on your server and enjoy fast internet along :) . Bonus: Automatically start VPN on boot . It’s quite irritating to log into the VPN everytime before starting work. So I created a system service to automatically connect to VPN on boot. Disclaimer: this will not work with WSL2 . Run these commands to setup the service . sudo touch /etc/systemd/system/openfortivpn.service . Open it with your favorite editor and enter this configuration. Thanks to DimitriPapadopoulos for helping me with it. . [Unit] Description = OpenFortiVPN After=network-online.target Documentation=man:openfortivpn(1) [Service] Type=idle ExecStart = /usr/bin/openfortivpn -c &lt;path to your config file&gt; StandardOutput=file:&lt;any-place-where you want to save your logs&gt; Restart=always RestartSec=10 [Install] WantedBy=multi-user.target . To start this service, simply run . sudo systemctl enable openfortivpn sudo systemctl start openfortivpn . To check if it is running . rohan@rohan-laptop ~&gt; sudo systemctl status openfortivpn ● openfortivpn.service - OpenFortiVPN Loaded: loaded (/etc/systemd/system/openfortivpn.service; enabled; vendor preset: enabled) Active: active (running) since Sat 2020-04-25 13:22:26 IST; 3h 43min ago Docs: man:openfortivpn(1) Main PID: 1851 (openfortivpn) Tasks: 6 (limit: 4915) CGroup: /system.slice/openfortivpn.service ├─1851 /usr/bin/openfortivpn -c /home/rohan/Documents/vpn-configs/iiitd.conf └─1852 /usr/sbin/pppd 38400 :1.1.1.1 noipdefault noaccomp noauth default-asyncmap nopcomp Apr 25 13:22:26 rohan-laptop systemd[1]: Started OpenFortiVPN. Apr 25 13:22:26 rohan-laptop pppd[1852]: pppd 2.4.7 started by root, uid 0 Apr 25 13:22:26 rohan-laptop pppd[1852]: Using interface ppp0 Apr 25 13:22:26 rohan-laptop pppd[1852]: Connect: ppp0 &lt;--&gt; /dev/pts/0 Apr 25 13:22:27 rohan-laptop pppd[1852]: local IP address 10.212.134.101 Apr 25 13:22:27 rohan-laptop pppd[1852]: remote IP address 1.1.1.1 . Thanks for reading :) If this did help you, feels free to like, comment and share this blog. . References . openfortivpn | ppp | ppp daemon | .",
            "url": "https://rohanrajpal.github.io/blog/2020/04/25/Selective-network-routing.html",
            "relUrl": "/2020/04/25/Selective-network-routing.html",
            "date": " • Apr 25, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "DMRC Connect",
            "content": "From July-November 2019, my team and I worked on an application. This project was a part of the course: CSE501-Designing Human-Centered Systems. . DMRC-Connect Motivation . The metro has been the backbone of transport in Delhi NCR, with daily ridership in excess of 5 million riders. It is famous for providing world-class transit with reach to almost all corners of the city with a reputation of punctuality and quality. At the core of these values lie the vision and mission of DMRC that aim to have the best possible experience for riders from all walks of life and have that with trust and reliability. . DMRC has always tried to take an extra step ahead to connect better with the riders and provide them with the best experience. Social media plays an important role in their endeavour to build this connection, with DMRC being active on all social media platforms and constantly engaging with the riders. . However, the question remains, do all Delhi metro users really use Twitter? While DMRC is putting in full efforts to relay this information to riders, is it really reaching the intended audience? Are complaints being solved fast enough for affected riders to benefit from it? Do all complaints be it from Twitter, or from their helplines come with complete information? . Unfortunately, a general trend after rolling out small surveys and talking to users at various metro stations and in and around Delhi, we got to know that this wasn’t the case. Not only was social media outreach restricted to those who followed DMRC on Twitter, but this sort of engagement also was never advertised or encouraged by any official metro source. . Problem Statement . What does DMRC Connect do? . We create an application that facilitates interaction between DMRC officials and DMRC users and bridges the gap created earlier due to less outreach. . What are the features? . Sticking to the theme of the user and official interaction, the features of DMRC Connect are: . Announcements | Complaint registration | Complaint tracking | Quick access helplines | FAQs | The Design Process . Contextual Enquiry . To help understand the problem better and get the user’s perspective on it, we set out to interview general metro users about their usage patterns and general behaviour when it comes to complaints. Our aim was to understand the kind of behaviour users have while interacting with current systems and understand whether the current modes of communication were effective or not. . The target audience was any general rider of the metro who was not a minor, and questions ranged from general ones that helped us understand their general behaviour towards tackling issues they faced, to more specific ones that asked the user about their experiences specific to the metro. . A few of the questions were: . How often do you face “issues” or “problems” in services offered to you? It could be in an app, it could be during transportation like railway/metro/bus, it could be college or conferences? | Have you ever come across official announcements from Delhi metro? Where did you hear about them? | What problems have you faced in the metro till now? Can you describe any one instance? | . Lo-Fidelity Prototypes . Based on the affinity mapping, we came up with the initial paper prototypes of our application and took them to users for testing through Task Analysis. . . Key Findings from v0 and v1: . Users went to “Help Centre” to do most tasks related to getting help from DMRC, very few users went to the actual intended target location. | “Contact Us” seemed to be a way to contact the developers rather than DMRC helplines. | Some people went to the complaint section in v2 to find women’s helpline. | In helplines, instead of direct calls, users wanted phone numbers to pop-up instead. | Hi-Fidelity Prototypes . After 3 iterations of user testing through Task analysis on the lo-fidelity prototypes, we arrived at the first version of the hi-fidelity prototype and conducted testing on it. . One of the major changes after user testing on the Hi-Fidelity prototype was to change the colour scheme to one with less hue, i.e primarily blue-based instead of red-based, and to shift from side navigation to bottom navigation instead. . Final Color Scheme and Typography . The typography used throughout was Roboto, as it is standardly used by Google and the colour scheme is mentioned below. . . Final Application . The final application, made with help of Android Studio and a Flask backend, was made live on the play store for users to use. The application is available here. . Building Better Interfaces #BBI2019 .",
            "url": "https://rohanrajpal.github.io/blog/2019/11/15/DMRC-Connect.html",
            "relUrl": "/2019/11/15/DMRC-Connect.html",
            "date": " • Nov 15, 2019"
        }
        
    
  
    
        ,"post2": {
            "title": "My GSoC experience with VideoLAN",
            "content": "Introduction . This summer, I participated as a Google Summer of Code student under VideoLAN. GSoC is undoubtedly one of the best summer programs out there. From designing interfaces and interactions to writing production-level code, I’ve learned tons of exciting stuff! I was blessed to have great mentors and learned a lot about the open-source community. . Project and Proposal . The VLC media player has an Editor which enables you to customize the player controlbar UI; you can arrange buttons like the play button as per your liking. My main task was to implement this Editor functionality in the new UI for VLC. . You can have a look at my project page on the GSoC website. Feel free to check out my proposal. . Patches . I made an account on VideoLAN’s Gitlab and worked on this repository. I used to push all my commits there to get them reviewed. Then made patches out of them and sent commits to the VLC-developer mailing list. A few other people would then review the patches. Finally, after making the required changes, the patches would get merged. . Here is a list of all my patches. . The Team . A big thanks to the team and my mentors who helped me with my endless doubts! . Abel Tesfaye (GSoC Student) | Sagar Kohli (GSoC Student) | Jean-Baptiste Kempf (VideoLAN president) | Pierre Lamot (Software engineer at Videolabs) | Alexandre Janniaux (Software engineer at Videolabs) | Rohan Rajpal (Me) | . Our communication was mainly via emails and #vlc-gsoc on IRC. . The Project . What work was done? . I had made some contributions towards the player controlbar and further wanted to work on it. Jean then suggested I should work on the Editor. Making the Editor was a big task to do, we divided it into the following parts: . Create a model of all the buttons/widgets on the player ControlBar. | Load the player buttons from the model instead of hardcoding them. | Make a simple drag and drop interface which changes the model by dragging and dropping and updates the config | Make a View from which you can drag and add buttons to the player ControlBar. | Add profiles combobox via which you can load, make and delete configurations for the player. | Populate the miniplayer from the model | Make miniplayer editable and add a tab for it in the editor | I have also worked on a few other things . Add all the missing buttons and widgets. I’ve added the following: Volume Widget | Teletext Widget | Aspect Ratio widget | Record button | Spacer widget | Extended Spacer widget | FullScreen button | Record button | AB Loop button | Snapshot button | Stop button | Media Info button | Frame by frame button | Faster button | Slower button | Open media button | Extended settings button | Step forward button | Step backward button | Quit button | . | Create a topbar for non editable buttons | What’s left to do? . Although I completed every task I was assigned, below-mentioned tasks are best suited as a follow-up for my work done: . If too many widgets come on one side the center buttons don’t remain in the center anymore. This has to be fixed. | The design of the Teletext and a few other widgets isn’t final and work needs to be done. | Demo . Have a look on how the VLC Editor works below: . Highlights and Challenges . Make a generic player controlbar . The first task was to make a model that had all the button and widget data. Then I had to use that model to populate the player ControlBar. Loaders are quite helpful when you have to load a component in QML. . Loader { id: myLoader source: &quot;MyItem.qml&quot; } . After making the buttons model. The next step was to make a QtAbstractListModel to maintain a list of the buttons in current config. This is how the player ControlBar is populated now: . The model would load the config from VLC Core API. | The player controlbar model would then add the respective buttons to the list. | The main controlbar would then use this model to get the list and ids which would then load the button from the buttons model. | . Make sure VLC is accessible via keyboard . One had to make sure that VLC is easily useable via the Keyboard as well. KeyNavigation and Focuscope are the critical things you’ll work with when you are working with Focus. . With a lot of documentation reading, experimenting, and Pierre’s help, I successfully got the KeyNavigation right. . Drag and Drop . We all use drag and drop interfaces quite frequently. Making such interfaces made me understand the design and the logic behind it. . To make an item draggable, you have to set it as a drag target. Similarly, to make it possible to drop a draggable, you need to declare a DropArea. . I also had to add functionalities like move, insert and delete to the model, because Drag and Drop involve all these actions. Have a look at some of the actions below: . The next task was to code the cancel and close buttons. The player controlbar should only be updated when the user presses the close button. To implement this, I used signals. . When you press the close button, the toolbarConfUpdated signal emits, and the playerControlBar is updated. . Signals and Slots are used for communication between objects in Qt. Here’s the signal sent when toolbar is updated: . if( toolbarEditor-&gt;exec() == QDialog::Accepted ) emit toolBarConfUpdated(); . Hinting the user . For the user to easily use the drag and drop interface, we have to provide some hints. When you hover over a draggable item, the cursor changes to an open hand cursor. If you click and hold over it, the cursor changes to a closed hand cursor. The cursor changes to ForbiddenCursor if you take the draggable to a place where it’s not possible to drop. . Profiles . Profiles help someone easily save their preferences. For this, I kept the configs of both the player and the mini-player controlbar and split them using a delimiter. . Different parts of the Editor . One interesting thing about this editor is that it is a mix of QML and Qt/C++. The window, profiles section and action buttons are coded in Qt. The whole drag and drop part is in QML. . Why use Qt when all can be done in QML? Because: . qml takes more ram | qml accessibility is hard to get | qml is harder to debug, and helps doing some big qml files, which we want to avoid at all cost. | . The picture below shows the division. . Things I learned . Git Tricks like fixup and autosquash help a lot in keeping the commits clean. | Rebase and reset is quite helpful when you need to edit or rearrange commits. | How to work with patches, send emails from git directly. | Handling merge conflicts like a pro. | How to split commits? A nice trick is if the commit message has bullet points, it can further be split. | . | Code Avoid writing over-engineered code | How to work on a huge codebase. Things like Memory leaks, ram consumption, learned how to use the VLC Core API. | Design patterns like the D-pointer strategy and Model View Delegate. | Qt/C++, QML and writing production-level code in them. | QtCreator, one of the best IDEs I’ve used. | . | Design Learned design concepts like form follows the flow. | Prototyping, brainstorming on interactions. | Clipping | Thinking design solutions keeping the code in mind. | . | .",
            "url": "https://rohanrajpal.github.io/blog/gsoc/2019/08/12/GSoC-with-VideoLAN.html",
            "relUrl": "/gsoc/2019/08/12/GSoC-with-VideoLAN.html",
            "date": " • Aug 12, 2019"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". I’m a third-year student CSE student at IIITD, a Google Summer of Code 2019 student under VideoLAN and an incoming intern at Expedia for Summer 2020. . Here is my Resume. . Notable Coursework . Deep Learning (Ongoing) | Wearable Applications, Research, Devices, Interactions (Ongoing) | Machine Learning | Computer Networks | Designing Human Centered Systems | Analysis and Design of Algorithms | Database Management System | Discrete Maths | Operating Systems | Data Structures and Algorithms | Probability and Statistics | Linear Algebra | . Engineering . Some of my coursework projects include: . Implementing the Go-Back-N protocol in Python | Simulating a computer network using ns-3 and evaluate its performance in C++ | Find diseases in crops using computer vision and deep learning techniques (Pytorch,Fastai). | Find patterns in shallow clouds using satellite imagery using deep learning techniques (Pytorch,Fastai). | Implementing demand paging in Xv6 in C | Implementing priority scheduling in Pintos in C | Implement a custom Linux shell using C | Implementing a Merkle tree in C | Made a replica of the popular Snake Vs Block using Java and JavaFX | . Independent projects: . I wrote a recommender system for movies. Implemented user-user and item-item collaborative filtering in Python. Used Flask, Javascript to build the web app and deployed it to Heroku. | Made a mini-ERP system, an Android app in Java using Firebase for handling the data | . Research . Undergraduate Researcher, Precog. The social computing lab of IIITD. | Working on analzing the social media data of an Indian app. Finding the possibility of an echo chamber within the app. | Using NLP techniques like LDA to do Topic Modelling in text | . Community and Leadership . I like contributing to the community, here’s what I’m trying to do from my side: . Lead and founder, Developer Students Club of IIITD. | Mentor, Student Mentorship Programme: Mentoring 7 freshmen and helping them with their academic, social and personal issues. | . | . Feel free to connect with me on LinkedIn. .",
          "url": "https://rohanrajpal.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  
  

  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rohanrajpal.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}